<?php
// Converts http://www.pagasa.dost.gov.ph/wb/wxfcst.html
// into a drupal Page
// @author Dino Simeon M. Madarang <dmadarang@gmail.com>

/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/
function pagasa_help($section='') {

  $output = '';

  switch ($section) {
    case "admin/help#pagasa":
      $output = '<p>'.  t("Converts PAGASA bulletin (HTML Table) to a drupal page"). '</p>';
      break;
  }

  return $output;
} // end pagasa_help


/**
* Generate HTML for the Pagasa block
* @param op the operation from the URL
* @param delta offset
* @returns block HTML
*/
function pagasa_block_info() {
    $blocks['pagasa_block'] = array('info' => t('PAGASA outlook block'));
    return $blocks;
}  

/**
* Generate HTML for the Pagasa block
* @param op the operation from the URL
* @param delta offset
* @returns block HTML
*/
function pagasa_block_view($delta=0) {
  switch ($delta) {
    case 0:
      $target_url = variable_get('pagasa_target_url', '');
      $path = base_path() . drupal_get_path('module', 'pagasa');
      $output2   = variable_get('pagasa_issued_at', '');
      $contents['data1'] = strip_tags($output2);
      $contents['data2'] = ltrim(str_replace("Synopsis:", "", variable_get('pagasa_synopsis','')));
      $contents['data3'] = variable_get('pagasa_forecast','');
      $block['subject'] = 'Weather';
      $block['content'] = theme('pagasa_block_synopsis', array('content' => $contents, 'lastupdate' => NULL));

      break;
  }

  return $block;
} 

/**
 * Implementation of hook_theme(). 
 */
function pagasa_theme() {
  return array(
    'pagasa_block_synopsis' => array(
      'variables' => array('content' => NULL, 'lastupdate' => NULL),
      'template' => 'pagasa-block-synopsis',

    ),
  );
}

function pagasa_fetch() {
  $feed['url'] = variable_get('pagasa_source_url', 'http://pagasa.dost.gov.ph/index.php/general-weather/daily-weather-forecast');
  pagasa_refresh($feed);
  variable_set('pagasa_checked', time());
}

function pagasa_parse_forecast() {

  //include_once 'table-extractor.php';

  $page = variable_get('pagasa_raw_data','');

  $SYNOPSIS_START_PATTERN = "Synopsis";
  $SYNOPSIS_END_PATTERN = "Forecast:";
  $SYNOPSIS_END_PATTERN = "<!-- >> NN_PROTECTED_TAGS";
 
  // Extract the synopsis table
  $start    = stripos($page, $SYNOPSIS_START_PATTERN);
  if ($start) {
     watchdog('pagasa', t('Pagasa "synopsis-start"  has been updated.'));

    $synopsis  = substr($page, $start);
    $endpos    = stripos($synopsis, $SYNOPSIS_END_PATTERN);

    if ($endpos == false) {
      // failed to parse synopsis
      watchdog('pagasa', t('Failed to parse synopsis table.') . $SYNOPSIS_END_PATTERN . "not found"); 
    }

    $synopsis  = substr($synopsis, 0, $endpos);
    //$synopsis  = str_replace("<b>Metro Manila</b>", "",$synopsis);
    //$synopsis  = str_replace("<br>", "", $synopsis);
    
    if ($synopsis) {
      $synopsis = str_replace("Weather", "", $synopsis);
      variable_set('pagasa_synopsis', $synopsis);
      watchdog('pagasa', t('Pagasa "synopsis" has been updated.'));
    }
    else {
      watchdog('pagasa', t('Failed to parse Pagasa synopsis table.'));
    }

    //Extract the forecast table
    $pos       = stripos($page, 'Forecast');
    $endpos    = stripos($page, 'More Weather') - 50;
    if ($endpos and $pos) {
      $forecast  = substr($page, $pos, $endpos - $pos);
      $image_path = base_path() . drupal_get_path('module', 'pagasa');
      $forecast  = str_replace("wb/wxsymbols/", $image_path . "/wxsymbols/", $forecast);

      if ($forecast) {
        variable_set('pagasa_forecast', $forecast);
        watchdog('pagasa', t('Pagasa "forecast" has been updated.'));
      }
      else {
        watchdog('pagasa', t('Failed to parse Pagasa forecast table.'));
      }
    }
    else {
      variable_set('pagasa_forecast', t('Pagasa "forecast" not available.'));
      watchdog('pagasa', t('Pagasa "forecast" not found.'));
    }

  }
  else {
    variable_set('pagasa_synopsis', "Weather update not available");
    variable_set('pagasa_forecast', t('Forecast not available.'));
    watchdog('pagasa', t('Failed to parse synopsis table and forecast table. Cities) string not found.'));
  }


}

/**
*
*/
function pagasa_admin_settings() {

  $period = drupal_map_assoc(array(120, 300, 3600, 7200, 14400, 21600, 43200), 'format_interval');

  $form['pagasa_source_url'] = array(
      '#type' => 'textfield', 
      '#title' => t('Source URL'), 
      '#size' => 80, 
      '#maxlength' => 255,
      '#default_value' => variable_get('pagasa_source_url', 'http://kidlat.pagasa.dost.gov.ph/index.php/general-weather/daily-weather-forecast'),
      '#description' => t('HTML Table source URL')
    );

    $form['pagasa_source_text'] = array(
      '#type' => 'textfield', 
      '#title' => t('Source Text'), 
      '#size' => 80, 
      '#maxlength' => 255,
      '#default_value' => variable_get('pagasa_source_text', 'PAGASA public weather forecast'),
      '#description' => t('Source Text to display.')
    );

    $form['pagasa_refresh'] = array('#type' => 'select',
      '#title' => t('Update interval'),
      '#default_value' => variable_get('pagasa_refresh', 300),
      '#options' => $period,
      '#description' => t('The refresh interval indicating how often you want to update this feed. Requires crontab.'),
    );

    $form['pagasa_update'] = array('#type' => 'button', '#value' => t('Update'));

    if (isset($_POST['op']) && $_POST['op'] == 'Update') {
      pagasa_fetch();
      pagasa_parse_forecast();
      drupal_set_message(t('PAGASA public weather forecast settings updated.'), 'status');
    }

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function pagasa_menu() {
  $items = array();
  
  $items['admin/config/services/pagasa'] = array(
    'title' => t('PAGASA Settings'),
    'description' => t('PAGASA module settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pagasa_admin_settings'),
    'access arguments' => array('administer pagasa'),
  );

  return $items;

}


/**
 * Implementation of hook_perm().
 */
function pagasa_permission() {
  return array(
    'administer pagasa' => array(
      'title' => t('Administer pagasa'),
    ),
    'access pagasa' => array(
      'title' => t('View pagasa'),
    ),
  );


}

/**
 * Implementation of hook_cron().
 *
 * Update bulletin once their refresh interval has elapsed.
 */
function pagasa_cron() {
  // previous value 7200
  $refresh = variable_get('pagasa_refresh', 120);
  $checked = variable_get('pagasa_checked', 0);

  if (($refresh + $checked) < time()) {
    pagasa_fetch();
    pagasa_parse_forecast();
  }

}

/**
 * Checks a news feed for new items.
 */
function pagasa_refresh($feed) {

  // Generate conditional GET headers.
  $headers = array();
  if (isset($feed['etag'])) {
    $headers['If-None-Match'] = $feed['etag'];
  }
  if (isset($feed['modified'])) {
    $headers['If-Modified-Since'] = gmdate('D, d M Y H:i:s', $feed['modified']) .' GMT';
  }

  $headers['method'] = 'GET';
  $headers['User-Agent'] = "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n\r\n";
  // Request feed.
  $result = drupal_http_request($feed['url'], $headers);

  // Process HTTP response code.
  switch ($result->code) {
    case 301:
      $feed['url'] = $result->redirect_url;
      watchdog('pagasa', t('Updated URL to %url.', array('%url' => $feed['url'])));
    case 200:
    case 302:
    case 304:
    case 307:
      // Filter the input data:
      if ($result->data) {
        if (isset($result->headers['Last-Modified'])) {
          $modified = strtotime($result->headers['Last-Modified']);
        }

        variable_set('pagasa_raw_data', $result->data);
        variable_set('pagasa_checked', time());
        watchdog('pagasa', t('There is new content from %site.', array('%site' => $feed['url'])));

	      //cache_clear_all('%weather-forecast%', 'cache_page');
        //pagasa_clear_front_page_cache();
        drupal_set_message(t('There is new syndicated content from %site.', array('%site' => $feed['url'])));
      }
      break;
    default:
      watchdog('pagasa', t('The pagasa forecast from %site seems to be broken, due to "%error".', 
                          array('%site' => $feed['url'], 
                                '%error' => $result->code .' '. $result->error)), 
                WATCHDOG_WARNING);
  }
}


function pagasa_clear_front_page_cache() {
  //$front = variable_get('site_frontpage','node');
  //$url = url($front, NULL, NULL, TRUE);
  //cache_clear_all($url, 'cache_page');
  //$url = preg_replace("%$front$%", '', $url);
  //cache_clear_all($url, 'cache_page', FALSE);
}
